import type { ESTree } from "meriyah";
import type { ActionInfo } from "../get-actions-info";
import removeAllReturns from "../../ast/remove-all-returns";
import containsIdentifiers from "../../ast/contains-identifiers";
import getAllIdentifiers from "../../ast/get-all-identifiers";
import getVarDeclarationIdentifiers from "../../ast/get-var-declaration-identifiers";

/**
 * This process of purging the body is necessary to remove all the code
 * that is not necessary for the action to work. The action in a next
 * process is injected into the body and executed.
 *
 * The action needs the dependencies that only the action has, so the
 * rest of the code is purged.
 */
export function getPurgedBody(info: ActionInfo): ESTree.BlockStatement {
  const defaultBody = { type: "BlockStatement", body: [] };
  const body = (info.componentFnExpression?.body ??
    defaultBody) as ESTree.BlockStatement;
  const bodyIdentifiers = getVarDeclarationIdentifiers(body);
  const actionFn =
    info.actionFnExpression ?? getActionFnFromActionIdentifier(info);
  const actionIdentifiers = getAllIdentifiers(actionFn);
  const intersectionSet = new Set<string>();

  // Get the intersection of the identifiers between the action and the body
  // taking into account the dependencies of the identifiers.
  for (const [bodyIdentifier, deps] of bodyIdentifiers) {
    if (!actionIdentifiers.has(bodyIdentifier)) continue;
    intersectionSet.add(bodyIdentifier);
    for (const dep of deps) intersectionSet.add(dep);
  }

  return {
    ...body,
    // The [body] default value is necessary in cases that inside the
    // Component are elements generated by arrow functions without
    // block statements: const el = () => <div>hello</div>; return el();
    body: removeAllReturns(body.body ?? [body]).filter((node) => {
      return (
        (node as any).__isActionFn || containsIdentifiers(node, intersectionSet)
      );
    }),
  };
}

function getActionFnFromActionIdentifier(info: ActionInfo) {
  let actionFn:
    | ESTree.FunctionExpression
    | ESTree.ArrowFunctionExpression
    | undefined;

  JSON.stringify(info.componentFnExpression, (k, v) => {
    if (info.actionIdentifierName === v?.id?.name) {
      v.__isActionFn = true;
      actionFn = v;
    }
    return v;
  });

  return actionFn;
}
